def jniDir = "src/main/jni"
def useJar = true//判断是否将so打包成jar

android {
    sourceSets.main {
        jni.srcDirs = []
        //jniLibs:Configures the location of the Android JNI libs for this set.
//        jniLibs.srcDirs = useJar ? [] : [new File(buildDir, 'libs')]
        jniLibs.srcDirs = useJar ? [] : ['libs']
    }

//自定义Android.mk
    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
        //获取local.properties文件属性
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = properties.getProperty('ndk.dir')
        commandLine "$ndkDir/ndk-build",
                "NDK_PROJECT_PATH=build",
                "APP_BUILD_SCRIPT=$jniDir/Android.mk"
//                'NDK_APPLICATION_MK=src/main/jni/Application.mk'
    }
    //设置将NDK打包成jar
    task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'ndk-libs'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'libs/'
    }

    //JavaCompile继承于AbstractCompile
//    tasks.withType(AbstractCompile) {
//        compileTask -> compileTask.dependsOn useJar ? ndkLibsToJar : ndkBuild
//    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkLibsToJar
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
//加入自定义编译的so
    compile fileTree(dir: new File(buildDir, 'libs'), include: ['*.jar'])
}